[{"C:\\Users\\mail\\OneDrive\\Dokumente\\Programmierung\\nodejs\\electron-ejs-test\\react-t-timer-app\\src\\App.js":"1","C:\\Users\\mail\\OneDrive\\Dokumente\\Programmierung\\nodejs\\electron-ejs-test\\react-t-timer-app\\src\\index.js":"2"},{"size":528,"mtime":1607441656357,"results":"3","hashOfConfig":"4"},{"size":4699,"mtime":1607450782728,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kwhkzr",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\mail\\OneDrive\\Dokumente\\Programmierung\\nodejs\\electron-ejs-test\\react-t-timer-app\\src\\App.js",[],"C:\\Users\\mail\\OneDrive\\Dokumente\\Programmierung\\nodejs\\electron-ejs-test\\react-t-timer-app\\src\\index.js",["11","12"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nvar starttime = \"00:00\";\nvar hour = \"00\";\nvar min = \"00\";\n \nclass ReacTeaTimer extends React.Component {\n  componentDidMount(){\n    document.title = \"ReactTeaTimer\"\n  }\n \n  render() {\n    return (\n  <div className=\"outer_frame\">\n    <div className=\"display_frame\">\n        <div class=\"timer_display settime\"><input class=\"inputtime\" placeholder=\"00\" min=\"0\" max=\"99\" id=\"settime_h\" type=\"number\" onChange={() => this.settime()}></input>:<input class=\"inputtime\" placeholder=\"00\" min=\"0\" max=\"59\" id=\"settime_m\" type=\"number\" onChange={() => this.settime()}></input></div>\n    </div>\n    <div className=\"display_frame\">\n      <div className=\"timer_display\">\n        {this.state.time}\n      </div>\n    </div>\n    <div className=\"key_panel\">\n      <div className=\"min_sec\">\n        <button className=\"lean_button\" onClick={() => this.incMins()}>\n          Min\n        </button>\n        <button className=\"lean_button\" onClick={() => this.incSecs()}>\n          Sec\n        </button>\n      </div>\n      <button className=\"wide_button\" onClick={() => this.startStopTimer()}>\n        Start/Stop\n      </button>\n      <button className=\"wide_button\" onClick={() => this.reset()}>\n        Reset\n      </button>\n    </div>\n  </div>\n    );\n  }\n \n  constructor(props) {\n    super(props);\n    this.state = {\n      time: \"05:00\",\n      lastTime: \"05:00\",\n      timerRunning: 0,\n      alarmRunning: 0\n    };\n    this.ac = new AudioContext()\n  }\n \n  updateModel(event) {\n    this.setState({});\n  }\n \n  parseTime() {\n    const [minStr, secsStr] = this.state.time.split(\":\");\n    const mins = parseInt(minStr, 10);\n    const secs = parseInt(secsStr, 10);\n    return [mins, secs];\n  }\n \n  incMins() {\n    let [mins, secs] = this.parseTime();\n    mins += 1;\n    const time = this.padZeros(mins) + \":\" + this.padZeros(secs);\n    this.setState({time: time, lastTime: time});\n  }\n \n  incSecs() {\n    let [mins, secs] = this.parseTime();\n    secs = (secs + 1) % 60;\n    const time = this.padZeros(mins) + \":\" + this.padZeros(secs);\n    this.setState({time: time, lastTime: time});\n  }\n \n  reset() {\n    this.setState({time: starttime, lastTime: starttime, timer: 0});\n    if (this.state.timerRunning === 1) {\n      this.setState({timerRunning: 0});\n      clearInterval(this.state.timer);\n    }\n  }\n\n  settime() {\n    console.log(starttime) \n    var hour = parseInt(document.getElementById('settime_h').value);\n    var minute = parseInt(document.getElementById('settime_m').value);\n    starttime =  ((hour <= 9) ? (\"0\" + hour) : hour) + \":\" + ((minute <= 9) ? (\"0\" + minute) : minute);   \n\n    console.log(starttime)\n    this.setState({time: starttime, lastTime: starttime, timer: 0});\n    if (this.state.timerRunning === 1) {\n      this.setState({timerRunning: 0});\n      clearInterval(this.state.timer);\n    }\n  }\n \n  decTimer() {\n    let [mins, secs] = this.parseTime();\n    if (secs > 0) {\n      secs -= 1;\n    }\n    else if (secs === 0) {\n      if (mins > 0) {\n        secs = 59;\n        mins -= 1;\n      }\n      else {\n        this.stopTimer();\n  this.beepOneMinute();\n      }\n    }\n    const time = this.padZeros(mins) + \":\" + this.padZeros(secs);\n    this.setState({time: time});\n  }\n \n  startTimer() {\n      this.setState({timerRunning: 1});\n      this.setState({timer: setInterval(this.decTimer.bind(this), 1000)});\n  }\n \n  stopTimer() {\n      clearInterval(this.state.timer);\n      this.setState({timerRunning: 0});\n  }\n \n  startStopTimer() {\n    if (this.state.alarmRunning) {\n      this.setState({alarmRunning: 0, time: this.state.lastTime});\n    }\n    else {\n      if (this.state.timerRunning === 0) {\n        this.startTimer();\n      }\n      else {\n        this.stopTimer();\n      }\n    }\n  }\n \n  padZeros(number) {\n    let result = String(number);\n    result = result.padStart(2, \"0\");\n    return result;\n  }\n \n  beepOneMinute() {\n    function beep(){\n      let v = this.ac.createOscillator();\n      let u = this.ac.createGain();\n      v.connect(u);\n      v.frequency.value = 1760;\n      v.type = \"square\";\n      u.connect(this.ac.destination);\n      u.gain.value = 2.5;\n      v.start(this.ac.currentTime);\n      v.stop(this.ac.currentTime + 0.2);\n    }\n \n    let interval = undefined;\n    let startTime = new Date().getTime();\n    this.setState({alarmRunning: 1});\n \n    function beepBody() {\n      beep.bind(this)();\n      let currTime = new Date().getTime();\n \n      if ((currTime - startTime > 15000) || (this.state.alarmRunning === 0)) {\n        clearInterval(interval);\n      }\n    }\n    interval = setInterval(beepBody.bind(this), 400);\n  }\n}\n \nReactDOM.render(\n  <ReacTeaTimer/>,\n  document.getElementById('root')\n);",{"ruleId":"13","severity":1,"message":"14","line":6,"column":5,"nodeType":"15","messageId":"16","endLine":6,"endColumn":9},{"ruleId":"13","severity":1,"message":"17","line":7,"column":5,"nodeType":"15","messageId":"16","endLine":7,"endColumn":8},"no-unused-vars","'hour' is assigned a value but never used.","Identifier","unusedVar","'min' is assigned a value but never used."]